// This header file was auto-generated by ClassMate++
// Created: 26 Jan 2019 8:47:47 pm
// Copyright (c) 2019, HurleyWorks

#pragma once

#include "Log.h"
#include "../gui/OpenglRenderer.h"

namespace Jahley
{
    class App
    {
    public:
        // Public members can be accessed from outside the class.
        // Protected members can only be accessed within the class and its subclasses.

        // Virtual destructor for the class.
        // Ensures that the destructor for any subclass of App is called when the object is destroyed.
        virtual ~App();

        // Method that returns a boolean value indicating whether the application is a windowed app or not.
        bool isWindowApp() const { return windowApp; }

        // Method that runs the application's main loop, handling user input and redrawing the window as necessary.
        void run();

        // Virtual methods that can be overridden by subclasses to handle various events during the application's lifecycle,
        // such as initialization, crashes, input events, and window resizing.
        virtual void update() {}
        virtual void onInit() {}
        virtual void onCrash() {}
        virtual void onInputEvent (const mace::InputEvent& e) {}
        virtual void onWindowResize(uint32_t width, uint32_t height) {}

        // Methods for handling crashes that occur during the application's execution.
        void preCrash();
        void onFatalError(g3::FatalMessagePtr fatal_message);

    protected:
        // Protected constructor for the class that takes a DesktopWindowSettings object and a boolean flag indicating
        // whether the application is windowed or not. This constructor initializes some member variables.
        App(DesktopWindowSettings settings = DesktopWindowSettings(), bool windowApp = false);

        // Pointer to the OpenGL window used by the application.
        OpenglWindowHandle window = nullptr;

        // Boolean value indicating whether the application is currently running.
        bool isRunning = true;

        // Timestamp indicating when the application was started.
        std::chrono::time_point<std::chrono::system_clock> startTime = std::chrono::system_clock::now();

    private:
        // Boolean value indicating whether the application is windowed or not.
        bool windowApp = false;

        // Callback function that is called in the event of a fatal error.
        FatalErrorCallback errorCallback = nullptr;

        // Callback function that is called before a crash occurs.
        PreCrashCallback preCrashCallback = nullptr;

        // Handler for logging messages generated by the application.
        LogHandler log;

        // Time interval indicating how frequently the application should redraw the window.
        std::chrono::milliseconds refreshWait;

        // Integer value indicating the refresh rate of the application's window, in milliseconds.
        int refresh = 16;

    }; // end class App

    // Implemented by client
    App* CreateApplication();

} // namespace Jahley